" Plugins {{{
" specify a directory for plugins
call plug#begin('~/.vim/plugged')
" make sure you use single quotes
Plug 'ctrlpvim/ctrlp.vim', { 'tag': '*' }
Plug 'vim-scripts/Gundo', { 'tag': '*' }
Plug 'altercation/vim-colors-solarized'
Plug 'vim-syntastic/syntastic'
Plug 'yko/mojo.vim'
Plug 'fatih/vim-go', { 'tag': '*' }
Plug 'rust-lang/rust.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdtree'
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'jeaye/color_coded'
call plug#end()
" }}}
" Colors {{{
syntax enable           " enable syntax processing
set t_Co=256            " enable 256 colors
colorscheme solarized
let g:solarized_termcolors=256
set background=dark
" }}}
" Spaces & Tabs {{{
set tabstop=4           " number of visual spaces per TAB
set softtabstop=4       " number of spaces in tab when editing
set expandtab           " tabs are spaces
set shiftwidth=4        " number of spaces to use for each step of (auto)indent
set modelines=1         " number of lines that is checked for set commands in files
filetype indent on      " load filetype-specific indent files
filetype plugin on      " load filetype-specific plugin files
set autoindent          " make vim handle indentation
" }}}
" UI Configuration {{{
set number              " show current line number
set showcmd             " show command in bottom bar
set cursorline          " don't highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to
set showmatch           " highlight matching [{()}]
" show tabs and trailing spaces
set list listchars=tab:»\ ,trail:·
" }}}
" C highlighting {{{
let c_gnu=1             " GNU gcc specific items
let c_comment_strings=1 " strings and numbers inside a comment
let c_space_errors=1    " trailing whitespace and space before <TAB>
" }}}
" Searching {{{
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase          " ignore case when searching
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
" }}}
" Folding {{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" space open/closes folds
nnoremap <space> za
"set foldmethod=indent   " fold based on indent level
" }}}
" Movement {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" }}}
" Autocommands {{{

if !exists("autocommands_loaded")
    let autocommands_loaded=1
    augroup reloadvimrc
        autocmd!
        autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc source $MYVIMRC | if has('gui_running') | source $MYGVIMRC | endif
    augroup END
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
            \ exe "normal g'\"" | endif
endif
" }}}
" Miscellaneous {{{
" highlight last inserted text
nnoremap gV `[v`]
set backspace=indent,eol,start  " allow backspacing over autoindent, line breaks and start of inserts
set ttyfast                     " faster redraws
set autowrite                   " write the contents of the file if it has been modified on certain commands
set grepprg=grep\ -nH\ $*       " use this for the grep command

" make vim not show listchars for Go (distracting)
autocmd FileType go setlocal list listchars=tab:\ \ ,trail:·

" toggle gundo (graphical undo plugin)
nnoremap <leader>u :GundoToggle<CR>

" save session
nnoremap <leader>s :mksession<CR>

" open ag.vim (the silver surfer source code search plugin)
nnoremap <leader>a :Ag
" }}}
" CtrlP (fuzzy file search plugin) {{{
let g:ctrlp_match_window='bottom,order:ttb'
let g:ctrlp_switch_buffer=0
let g:ctrlp_working_path_mode=0
let g:ctrlp_user_command='ag %s -l --nocolor --hidden -g ""'
let g:ctrlp_custom_ignore='\vbuild/|dist/|venv/|target/|\.(o|swp|pyc|egg)$'
" }}}
" Syntastic Configuration {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_cpp_checkers = ['gcc']
let g:syntastic_cpp_compiler = 'gcc'
let g:syntastic_cpp_compiler_options = '-std=c++14 -Wall -Wextra'
" }}}
" mojo.vim Configuration {{{
let mojo_highlight_data=1
let mojo_disable_html=1
" }}}
" YouCompleteMe (ycm) Configuration {{{
let g:ycm_rust_src_path = '/home/pk/Code/rustc-1.20.0-src'
"let g:ycm_server_python_interpreter = '/usr/bin/python2'
" }}}
" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}
" Functions {{{
function! ToggleNumber()
    if (&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunction

" strip trailing whitespace at the end of files.
" this is called on buffer write in the autogroup above
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l=line(".")
    let c=col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
    let ft=toupper(a:filetype)
    let group='textGroup'.ft
    if exists('b:current_syntax')
        let s:current_syntax=b:current_syntax
        " Remove current syntax definition, as some syntax files (e.g.
        " cpp.vim) do nothing if b:current_syntax is defined
        unlet b:current_syntax
    endif
    execute 'syntax inlcude @'.group.' syntax/'.a:filetype.'.vim'
    try
        execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
    catch
    endtry
    if exists('s:current_syntax')
        let b:current_syntax=s:current_syntax
    else
        unlet b:current_syntax
    endif
    execute 'syntax region textSnip'.ft.'
        \ matchgroup='.a:textSnipHl.'
        \ start="'.a:start.'" end="'.a:end.'"
        \ contains=@'.group
endfunction
" }}}
" vim:foldmethod=marker:foldlevel=0
